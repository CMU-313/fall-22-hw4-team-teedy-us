openapi: '3.0.2'
info:
  title: Success Prediction Microservice
  version: '1.0'
servers:
  - url: http://127.0.0.1:5000
paths:
  /predict:
    get:
      description: 'request input applicant info, send to prediction microservice, and output predicted score for G3 (final grade)'
      parameters:
        - name: Mjob_health
          in: query
          description: whether or not the mother's job is in health
          required: true
          explode: true
          schema:
            type: integer
            minimum: 0
            maximum: 1
        - name: Fjob_teacher
          in: query
          description: whether or not the father's job is a teacher
          required: true
          explode: true
          schema:
            type: integer
            minimum: 0
            maximum: 1
        - name: studytime
          in: query
          description: weekly study time
          required: true
          explode: true
          schema:
            type: integer
            minimum: 1
            maximum: 4
        - name: higher_yes
          in: query
          description: wants to take higher education
          required: true
          explode: true
          schema:
            type: integer
            minimum: 0
            maximum: 1
        - name: health
          in: query
          description: current health status
          required: true
          explode: true
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: absences
          in: query
          description: number of school absences
          required: true
          explode: true
          schema:
            type: integer
            minimum: 0
            maximum: 93
      responses:
        '200':
          description: OK, returns 1 or 0 signifying if a student is a good candidate.
          content:
            application/json:
              schema:
                type: integer
                format: int64
        '400':
          description: Invalid input
    
# components:
#   schemas: 
#     Info:
#       required:
#         - name
#         - photoUrls
#       type: object
#       properties:
#         reasons:
#           type: string
#           description: reason of applying
#           example: home
#         activities:
#           type: boolean
#         absences:
#           type: integer
#           format: int64
#           example: 10
#       xml:
#         name: pet